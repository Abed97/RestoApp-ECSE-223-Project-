class Table {
   status {
      Available {
         startOrder() / {
            new Order(new java.sql.Date(Calendar.getInstance().getTime().getTime()), new java.sql.Time(Calendar.getInstance().getTime().getTime()), this.getRestoApp(), this);
         } -> NothingOrdered;
         addToOrder(Order o) / {
            o.addTable(this);
         } -> NothingOrdered; 
      }
      NothingOrdered {
         orderItem(int quantity, Order o, Seat s, PricedMenuItem i) [quantityNotNegative(quantity)] / {
         new OrderItem(quantity,i,o,s);
            // create a new order item with the provided quantity, order, seat, and priced menu item
         } -> Ordered; 
         addToOrderItem(OrderItem i, Seat s) / {
          i.addSeat(s);
            // add provided seat to provided order item unless seat has already been added, in which case nothing needs to be done
         } -> Ordered;
         endOrder(Order o) / {
            if (!o.removeTable(this)) {
               if (o.numberOfTables() == 1) {
                  o.delete();
               }
            }
         } -> Available;
      }
      Ordered {
         orderItem(int quantity, Order o, Seat s, PricedMenuItem i) [quantityNotNegative(quantity)] / {
             
         new OrderItem(quantity,i,o,s);
            // create a new order item with the provided quantity, order, seat, and priced menu item
         } -> Ordered; 
         addToOrderItem(OrderItem i, Seat s) / {
         i.addSeat(s);
            // add provided seat to provided order item unless seat has already been added, in which case nothing needs to be done
         } -> Ordered;
         cancelOrderItem(OrderItem i) [iIsLastItem(i)] / {
            i.delete();
         } -> NothingOrdered;
         cancelOrderItem(OrderItem i) [!iIsLastItem(i)] / {
            i.delete();
         } -> Ordered;
         cancelOrder() / {
             List<Seat> seats = getCurrentSeats();
        Order lastOrder = getOrder(getOrders().size()-1);
			for(Seat seat: seats ){
			  for (int i = 0; i < seat.getOrderItems().size(); i++)
					if (seat.getOrderItem(i).getOrder() == lastOrder) {
						cancelOrderItem(seat.getOrderItem(i));
					}
				
 		   }
         } -> NothingOrdered;
         billForSeat(Order o, Seat s) / {
            // create a new bill with the provided order and seat; if the provided seat is already assigned to
            // another bill for the current order, then the seat is first removed from the other bill and if no seats
            // are left for the bill, the bill is deleted
         } -> Ordered;
         addToBill(Bill b, Seat s) / {
            // add provided seat to provided bill unless seat has already been added, in which case nothing needs
            // to be done; if the provided seat is already assigned to another bill for the current order, then the
            // seat is first removed from the other bill and if no seats are left for the bill, the bill is deleted
         } -> Ordered;
         endOrder(Order o) [allSeatsBilled()] / {
         
        
         } -> Available;
      }
   }
   
   // check that the provided quantity is an integer greater than 0
   private boolean quantityNotNegative(int quantity) {
      if(quantity>=0){return true;}
      else{return false;}
   }

   // check that the provided order item is the last item of the current order of the table
   private boolean iIsLastItem(OrderItem i) {
      Order order = i.getOrder();
          if (order.numberOfOrderItems() == 1) {
        	  return true;
        	  } else {
        	  return false;
        	  }
      
   }

   // check that all seats of the table have a bill that belongs to the current order of the table 
   private boolean allSeatsBilled() {
   boolean billed= true;
   Order o=this.getOrder(this.numberOfOrders()-1);
   List <Seat> seats = this.getCurrentSeats();
   List <Seat> seatsWithOrders = new ArrayList<Seat>();
   List<OrderItem> orderItems= o.getOrderItems();
   for (Seat s1: seats){
   		for( OrderItem i :orderItems){
   		if (s1.getOrderItems().contains(i)){ seatsWithOrders.add(s1);}
   		}} 
   List< Bill> bills = o.getBills(); //bills that belong to current order
   for( Seat s :seatsWithOrders){ //for each seat
      boolean seatBilled=false;
     List <Bill> seatbills= s.getBills();
     for ( Bill sb : seatbills){ //for each bill in seat bills
          if (bills.contains(sb)){  //if orderbills contains this bill
         seatBilled= true;         // then the seat is billed
         break; }               // break out of this seatbills
          
    }
         
         if (seatBilled ==false){ billed=false;
         break;}
         
   }
        return billed;
  }
      // TODO
      
   }

}


