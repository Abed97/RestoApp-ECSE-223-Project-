namespace ca.mcgill.ecse223.resto.model;

use RestoPersistence.ump;

class RestoApp {
   1 <@>- * Reservation reservations; // sorted by date and time
   1 <@>- * Table tables;
   0..1 -> * Table currentTables; // subsets tables
   1 <@>- * Order orders;
   0..1 -> * Order currentOrders; // subsets orders
   1 <@>- 1 Menu menu;   
   1 <@>- * PricedMenuItem pricedMenuItems;
   1 <@>- * Bill bills;
}

class Reservation {
   Date dateTime;
   Integer numberInParty;
   contactName;
   contactEmailAddress;
   contactPhoneNumber;
   autounique reservationNumber;
   * reservations -- 1..* Table tables; // only from currentTables
}

class Table {
   unique Integer number;
   Integer x;
   Integer y;
   Integer width;
   Integer length;
   1 <@>- 1..* Seat seats;
   0..1 -> * Seat currentSeats; // subsets seats
   
     //Added overlap method
  public boolean doesOverlap(int x, int y, int width, int length) {
	return !(this.x > x + width // R1 is right to R2
	 || this.x + width < x // R1 is left to R2
	  || this.y + length < y // R1 is above R2 
	  || this.y > y + length);// R1 is below R1
		}
  }

class Seat {
}

class Order {
   Date dateTime;
   autounique number;
   * orders -- 1..* Table tables; // only from currentTables for currentOrders
   1 <@>- * OrderItem orderItems;
}

class OrderItem {
   Integer quantity;
   * orderItems -- 1 PricedMenuItem pricedMenuItem; // only from MenuItem.currentPricedMenuItem for currentOrders
   * orderItems -- 1..* Seat seats; // only from order.tables.seats
}

class Menu {   
   1 <@>- * MenuItem menuItems;
}

class MenuItem {
   unique name;
   enum ItemCategory { Appetizer, Main, Dessert, AlcoholicBeverage, NonAlcoholicBeverage }
   lazy ItemCategory itemCategory;
   1 -- 1..* PricedMenuItem pricedMenuItems;
   0..1 -> 0..1 PricedMenuItem currentPricedMenuItem; // subsets priced menus items
}

class PricedMenuItem {
   Double price;
}

class Bill {
   * bills -- 1 Order order; // order.bills.issuedForSeats = order.orderItems.seats
   * bills -- 1..* Seat issuedForSeats; // only from order.orderItems.seats;
}